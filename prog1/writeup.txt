1. Zoe Bozich, Mason Rudolph

2. There is a discrepancy of about 0.01 between the example output and our output in printSortedHits. This is likely a rounding error due to our calculation of the midpoint or the formatting of the decimal output. Given more time we would have researched how the formatting of these numbers works as well as the arithmetic functions we used to see if any of them round own their own.

3. We used a seemingly excessive amount of nested for loops, that iterate through all possible edges simply because we needed to know the index (the node's number) of the edge. Had the Edge objects held the information on their start and end nodes we could have used foreach loops which would have prevented needing to iterate through all the null edges in the adjMatrix.

4. Topological sort and Decode were the most challenging methods to implement, followed by countAllPaths, largely because they were hard to visualize. They were also comprised of stacks and queues which we were less familiar with. With the consideration of time complexity a lot of our initial ideas of how to implement these methods had to be thrown out because they were brute force. On each of these methods with a little help on visualization we were able to find solutions that were significantly more efficient than our original ideas.

5. During initial debugging to get the program to run all the way through, we caught errors in our constructor, specifically we hadn't accounted for double digit node labels. After it was running we tried several ways of breaking our program as a method of testing. Test lattice 1 tested to see if our topological sort could handle edges whose start node was a greater index than their end node, which caught an error in our CountAllPaths where we weren't iterating through parents in topological order. Test lattice 2 was to check that topological sort would detect a cycle and return the proper error message. Other testing strategies we used was adding a print statement (that has since been removed) to print the result of toString, in order to check that it had recorded the lattice information correctly.
